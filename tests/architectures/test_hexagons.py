import unittest
from analyser.architectures import hexagons


class TestHexagons(unittest.TestCase):
	def test_1_qubit(self):
		r1 = [[0, 1], [1, 2]]
		r2 = [[3, 4], [4, 5]]
		c1 = [[0, 3], [2, 5]]
		correct = [*r1, *r2, *c1]
		self.assertEqual(
			sorted(hexagons(1, aslist=True)),
			sorted(correct)
		)

	def test_20_qubits(self):
		r1 = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]
		r2 = [[7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14]]
		r3 = [[15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22]]
		r4 = [[23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29]]
		c1 = [[0, 8], [2, 10], [4, 12], [6, 14]]
		c2 = [[7, 15], [9, 17], [11, 19], [13, 21]]
		c3 = [[16, 23], [18, 25], [20, 27], [22, 29]]
		correct = [*r1, *r2, *r3, *r4, *c1, *c2, *c3]
		self.assertEqual(
			sorted(hexagons(20, aslist=True)),
			sorted(correct)
		)

	def test_30_qubits(self):
		r1 = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]
		r2 = [[7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14]]
		r3 = [[15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22]]
		r4 = [[23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29]]
		c1 = [[0, 8], [2, 10], [4, 12], [6, 14]]
		c2 = [[7, 15], [9, 17], [11, 19], [13, 21]]
		c3 = [[16, 23], [18, 25], [20, 27], [22, 29]]
		correct = [*r1, *r2, *r3, *r4, *c1, *c2, *c3]
		self.assertEqual(
			sorted(hexagons(30, aslist=True)),
			sorted(correct)
		)

	def test_n_3(self):
		r1 = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]
		r2 = [[7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14]]
		r3 = [[15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22]]
		r4 = [[23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29]]
		c1 = [[0, 8], [2, 10], [4, 12], [6, 14]]
		c2 = [[7, 15], [9, 17], [11, 19], [13, 21]]
		c3 = [[16, 23], [18, 25], [20, 27], [22, 29]]
		correct = [*r1, *r2, *r3, *r4, *c1, *c2, *c3]
		self.assertEqual(
			sorted(hexagons(n=3, aslist=True)),
			sorted(correct)
		)

	def test_n_4(self):
		r1 = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]]
		r2 = [[9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18]]
		r3 = [[19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28]]
		r4 = [[29, 30], [30, 31], [31, 32], [32, 33], [33, 34], [34, 35], [35, 36], [36, 37], [37, 38]]
		r5 = [[39, 40], [40, 41], [41, 42], [42, 43], [43, 44], [44, 45], [45, 46], [46, 47]]
		c1 = [[0, 10], [2, 12], [4, 14], [6, 16], [8, 18]]
		c2 = [[9, 19], [11, 21], [13, 23], [15, 25], [17, 27]]
		c3 = [[20, 30], [22, 32], [24, 34], [26, 36], [28, 38]]
		c4 = [[29, 39], [31, 41], [33, 43], [35, 45], [37, 47]]
		correct = [*r1, *r2, *r3, *r4, *r5, *c1, *c2, *c3, *c4]
		self.assertEqual(
			sorted(hexagons(n=4, aslist=True)),
			sorted(correct)
		)

	def test_n_5(self):
		r1 = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]
		r2 = [[11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17]]
		r22 = [[17, 18], [18, 19], [19, 20], [20, 21], [21, 22]]
		r3 = [[23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29]]
		r32 = [[29, 30], [30, 31], [31, 32], [32, 33], [33, 34]]
		r4 = [[35, 36], [36, 37], [37, 38], [38, 39], [39, 40], [40, 41]]
		r42 = [[41, 42], [42, 43], [43, 44], [44, 45], [45, 46]]
		r5 = [[47, 48], [48, 49], [49, 50], [50, 51], [51, 52], [52, 53]]
		r52 = [[53, 54], [54, 55], [55, 56], [56, 57], [57, 58]]
		r6 = [[59, 60], [60, 61], [61, 62], [62, 63], [63, 64], [64, 65]]
		r62 = [[65, 66], [66, 67], [67, 68], [68, 69]]
		c1 = [[0, 12], [2, 14], [4, 16], [6, 18], [8, 20], [10, 22]]
		c2 = [[11, 23], [13, 25], [15, 27], [17, 29], [19, 31], [21, 33]]
		c3 = [[24, 36], [26, 38], [28, 40], [30, 42], [32, 44], [34, 46]]
		c4 = [[35, 47], [37, 49], [39, 51], [41, 53], [43, 55], [45, 57]]
		c5 = [[48, 59], [50, 61], [52, 63], [54, 65], [56, 67], [58, 69]]
		correct = [*r1, *r2, *r22, *r3, *r32, *r4, *r42, *r5, *r52, *r6, *r62, *c1, *c2, *c3, *c4, *c5]
		self.assertEqual(
			sorted(hexagons(n=5, aslist=True)),
			sorted(correct)
		)
